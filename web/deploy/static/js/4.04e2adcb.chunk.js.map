{"version":3,"sources":["components/modal.js","components/Calender.js"],"names":["useStyles","makeStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","TransitionsModal","open","setOpen","modalInfo","classes","console","log","handleClose","Modal","aria-labelledby","aria-describedby","className","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","id","allDay","title","notes","start","toDate","toString","end","recurrence_type","Button","variant","onClick","Calender","props","state","events","modelInfo","Firebase","firestore","collection","get","eventList","finalList","docs","map","value","val","data","textColor","color","start_date","end_date","recurrence_rule","newlist","reduce","current","position","indexOf","count","arr","date","i","newdate","Date","setDate","getDate","push","newSet","Set","this","setState","Array","from","header","left","center","right","defaultDate","now","navLinks","editable","eventLimit","eventClick","info","React","Component"],"mappings":"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","file":"static/js/4.04e2adcb.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function TransitionsModal({ open, setOpen, modalInfo }) {\n  const classes = useStyles();\n  console.log(modalInfo, open);\n\n  const handleOpen = () => {\n    console.log('djsanda');\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    console.log('close');\n    setOpen(false);\n  };\n\n  console.log(modalInfo);\n  return (\n    <div>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <div className={classes.paper}>\n            <h4 id=\"transition-modal-title\">Description</h4>\n            <p id=\"transition-modal-description\">\n              All Day:{' '}\n              {modalInfo.allDay === true ? <span>Yes</span> : <span>No</span>}\n              <br />\n              Description: {modalInfo.title}\n              <br />\n              Notes: {modalInfo.notes || <span>No Notes regarding this</span>}\n              <br />\n              StartTime:{' '}\n              {modalInfo.start ? modalInfo.start.toDate().toString() : <></>}\n              <br />\n              EndTime:{' '}\n              {modalInfo.end ? (\n                modalInfo.end.toDate().toString()\n              ) : (\n                <span>No End Date Availaible</span>\n              )}\n              <br />\n              Type: {modalInfo.recurrence_type}\n            </p>\n            <Button variant=\"contained\" onClick={handleClose}>\n              Close\n            </Button>{' '}\n          </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}\n","// import React...\nimport React from 'react';\nimport Firebase from '../firebase';\nimport 'fullcalendar-reactwrapper/dist/css/fullcalendar.min.css';\nimport FullCalendar from 'fullcalendar-reactwrapper';\nimport Modal from './modal';\n\nclass Calender extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [\n        {\n          title: 'All Day Event',\n          start: '2017-05-01',\n        },\n      ],\n      open: false,\n      modelInfo: {},\n    };\n  }\n\n  async componentDidMount() {\n    const eventList = await Firebase.firestore()\n      .collection('calendar_events')\n      .get();\n    const finalList = eventList.docs.map((value) => {\n      const val = value.data();\n      const obj = {\n        textColor: 'white',\n        color: val.color,\n        start: val.start_date.toDate(),\n        end: val.end_date.toDate(),\n        title: val.title,\n        recurrence_type: val.recurrence_type,\n        recurrence_rule: val.recurrence_rule,\n        notes: val.notes,\n      };\n      return obj;\n    });\n\n    const newlist = [...finalList];\n\n    finalList.reduce((accumulator = [], current, index, array) => {\n      if (current.recurrence_type === 'Weekly') {\n        const position = current.recurrence_rule.indexOf('COUNT');\n        const count = current.recurrence_rule[position + 6];\n        let arr = [];\n        const date = current.start;\n        for (let i = 1; i < count; i++) {\n          const newdate = new Date(date.setDate(date.getDate() + 7));\n          arr.push({ ...current, start: newdate });\n        }\n        newlist.push(...arr);\n      }\n    });\n    let newSet = new Set(newlist);\n    console.log();\n    this.setState({ events: Array.from(newSet) });\n  }\n\n  render() {\n    console.log(this.state.modelInfo);\n    const eventClick = (info) => {\n      console.log(info);\n      this.setState({ open: !this.state.open, modelInfo: info });\n    };\n    return (\n      <div id=\"example-component\">\n        <FullCalendar\n          id=\"your-custom-ID\"\n          header={{\n            left: 'prev,next today myCustomButton',\n            center: 'title',\n            right: 'month,basicWeek,basicDay',\n          }}\n          defaultDate={Date.now()}\n          navLinks={true} // can click day/week names to navigate views\n          editable={true}\n          eventLimit={true} // allow \"more\" link when too many events\n          events={this.state.events}\n          eventClick={eventClick}\n        />\n        <Modal\n          open={this.state.open}\n          setOpen={(state) => this.setState({ open: state })}\n          modalInfo={this.state.modelInfo}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Calender;\n"],"sourceRoot":""}